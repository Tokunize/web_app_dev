"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import datetime, timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7rd+ggxl@zmwna&zce-n20qv!s-&jacl9eu8ivyo-#d*$kk9me'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
   'seahorse-app-nbf4g.ondigitalocean.app',
   '127.0.0.1',
   'localhost'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "property",
    'rest_framework', #Django REST Framework
    'corsheaders', #CORS]
    'django_filters',
    'users'
]



CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", 
]
CORS_ALLOW_ALL_ORIGINS = True


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'marketplace',
        'USER': 'postgres',
        'PASSWORD': 'Ilargia1234',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

AUTH_USER_MODEL = 'users.customuser'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SECRET_KEY = 'your-secret-key'  # Asegúrate de tener una clave secreta
ALGORITHM = 'RS256'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'users.authentication.Auth0JWTAuthentication',  # Reemplaza esto con la ruta correcta
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

















# import requests
# import base64
# import json
# from jose import jwk, JWTError, jwt

# # Configuración
# AUTH0_DOMAIN = 'dev-2l2jjwfm5ekzae3u.us.auth0.com'
# jwks_url = f'https://{AUTH0_DOMAIN}/.well-known/jwks.json'

# def get_jwks():
#     """Obtiene el JWKS desde Auth0"""
#     response = requests.get(jwks_url)
#     response.raise_for_status()  # Lanza un error si la solicitud falla
#     return response.json()

# def get_public_key(jwks, kid):
#     """Encuentra la clave pública en el JWKS usando el kid del token"""
#     if isinstance(jwks, dict) and 'keys' in jwks:
#         keys = jwks['keys']
#     else:
#         raise Exception("Invalid JWKS format.")
    
#     for key in keys:
#         if key['kid'] == kid:
#             # Convertir la clave JWK a un formato que jose pueda usar
#             return jwk.construct(key)
    
#     raise Exception("Public key not found.")

# def decode_jwt_header(token):
#     """Decodifica el encabezado del JWT para extraer el kid"""
#     try:
#         header_segment = token.split('.')[0]
#         header_data = base64.urlsafe_b64decode(header_segment + '==')  # Añadir '=' para hacer el padding correcto
#         header_json = header_data.decode('utf-8')
#         return json.loads(header_json)
#     except Exception as e:
#         raise Exception(f"Error decoding JWT header: {str(e)}")

# def validate_jwt(token, public_key):
#     """Valida el JWT usando la clave pública"""
#     try:
#         decoded_token = jwt.decode(token, public_key, algorithms=['RS256'], audience='https://my-endpoints/users')
#         return decoded_token
#     except JWTError as e:
#         raise Exception(f"Token validation failed: {str(e)}")

# def main():
#     # Obtener el JWKS
#     jwks = get_jwks()
    
#     # Suponiendo que ya tienes el JWT
#     jwt_token = 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InpzbUNEeUExLXByclhmeExTalB1bCJ9.eyJpc3MiOiJodHRwczovL2Rldi0ybDJqandmbTVla3phZTN1LnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2NmQ5NzdjN2UyNDU4ZWIxNzUzNzMzNGEiLCJhdWQiOlsiaHR0cHM6Ly9teS1lbmRwb2ludHMvdXNlcnMiLCJodHRwczovL2Rldi0ybDJqandmbTVla3phZTN1LnVzLmF1dGgwLmNvbS91c2VyaW5mbyJdLCJpYXQiOjE3MjU1MzQ4NzgsImV4cCI6MTcyNTYyMTI3OCwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsImF6cCI6IlJrREszOG4wVlBOWkVtdXYwWmdReDlQOTNyTFBBT1RLIiwicGVybWlzc2lvbnMiOlsiaW52ZXN0b3IiXX0.NCgjm0IJse2-IIds93MSi3gPvR_oyKcCvz1WI8_BgBbHCe9jFSEnqEf1wdwwFppiIV1D7nFduQ4DkkB0aCioeAD4aWFzh9q4LwH8W4IMK3gH5TszooMmjyq83iipxJ6EKbpZ3TZpDvX68gQ6vGNpc3iuQ_MOrLDAqIXjuh4ydmY1PCgkiqqy194gt-5IecIna-aUSkMs2b2YBdouCKaZw_upy1zKUZZatHuWB1UCdgrYqxtTEp4VQ9rwLB3MfMjs8Ar0PjquWGQ2q5KS0ulh9J4zyjy5vrNd766ZgWbUOnCZbBkdaxgtD6JFEkYkHyln5jM5xTKvxZ9JAI1lJRWAOw'  # Reemplaza con tu JWT
    
#     # Decodificar el encabezado del JWT para obtener el kid
#     try:
#         header_data = decode_jwt_header(jwt_token)
#         kid = header_data.get('kid')
#         if not kid:
#             raise Exception("Kid not found in JWT header.")
#         print(f"Extracted kid: {kid}")
#     except Exception as e:
#         print(f"Error extracting kid: {str(e)}")
#         return
    
#     # Obtener la clave pública
#     try:
#         public_key = get_public_key(jwks, kid)
#         print("Public Key:", public_key)
#     except Exception as e:
#         print(f"Error getting public key: {str(e)}")
#         return
    
#     # Validar el JWT
#     try:
#         decoded_token = validate_jwt(jwt_token, public_key)
#         print("Decoded Token:", decoded_token)
#     except Exception as e:
#         print(f"Error: {str(e)}")

# main()
